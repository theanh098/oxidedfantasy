//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::OffendedRule;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "match_result")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub match_id: i32,
    pub is_drawled_match: bool,
    pub left_breaker_id: Option<i32>,
    pub right_breaker_id: Option<i32>,
    pub metadata: Option<String>,
    pub left_offended_rule: Option<OffendedRule>,
    pub right_offended_rule: Option<OffendedRule>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::r#match::Entity",
        from = "Column::MatchId",
        to = "super::r#match::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Match,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::LeftBreakerId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User2,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::RightBreakerId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User1,
}

impl Related<super::r#match::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Match.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
