//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "match_monitor")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub is_draw: bool,
    #[sea_orm(column_type = "JsonBinary")]
    pub metadata: Json,
    pub owner_point: i32,
    pub opponent_point: i32,
    pub opponent_id: i32,
    pub matched_at: Option<DateTimeWithTimeZone>,
    pub winner_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::r#match::Entity")]
    Match,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::WinnerId",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    User,
}

impl Related<super::r#match::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Match.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
