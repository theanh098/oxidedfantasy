//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "ChipRule")]
pub enum ChipRule {
    #[sea_orm(string_value = "All")]
    All,
    #[sea_orm(string_value = "AnyChip")]
    AnyChip,
    #[sea_orm(string_value = "NoChip")]
    NoChip,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "OffendedRule")]
pub enum OffendedRule {
    #[sea_orm(string_value = "MinWeekStart")]
    MinWeekStart,
    #[sea_orm(string_value = "Transferring")]
    Transferring,
    #[sea_orm(string_value = "UsingChip")]
    UsingChip,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "TransferRule")]
pub enum TransferRule {
    #[sea_orm(string_value = "Limit0")]
    Limit0,
    #[sea_orm(string_value = "Limit1")]
    Limit1,
    #[sea_orm(string_value = "Limit2")]
    Limit2,
    #[sea_orm(string_value = "Limit3")]
    Limit3,
    #[sea_orm(string_value = "Limit4")]
    Limit4,
    #[sea_orm(string_value = "NoLimit")]
    NoLimit,
}
