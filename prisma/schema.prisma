datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int             @id @default(autoincrement())
  email             String          @db.VarChar
  active            Boolean         @default(false)
  d_coin            Int             @default(0)
  fpl_id            Int?
  google_id         String?         @unique @db.VarChar
  facebook_id       String?         @unique @db.VarChar
  name              String?         @db.VarChar(34)
  player_first_name String?         @db.VarChar(34)
  player_last_name  String?         @db.VarChar(34)
  matches           Match[]
  joined_matches    MatchOpponent[]
  won_matches       MatchMonitor[]
  transactions      Transaction[]

  @@map("user")
}

model Match {
  id                Int            @id @default(autoincrement())
  season            String         @db.VarChar(16)
  is_private        Boolean        @default(false)
  created_date      DateTime       @default(now()) @db.Timestamptz(3)
  status            match_status   @default(Next)
  gameweek          Int
  bet_amount        Int
  transfer_rule     transfer_rule
  chip_rule         chip_rule
  owner_id          Int
  match_opponent_id Int?           @unique
  match_monitor_id  Int            @unique
  owner             User           @relation(fields: [owner_id], references: [id])
  match_opponent    MatchOpponent? @relation(fields: [match_opponent_id], references: [id])
  monitor           MatchMonitor   @relation(fields: [match_monitor_id], references: [id])

  @@map("match")
}

model MatchOpponent {
  id          Int    @id @default(autoincrement())
  opponent_id Int
  opponent    User   @relation(fields: [opponent_id], references: [id])
  match       Match?

  @@map("match_opponent")
}

model MatchMonitor {
  id             Int       @id @default(autoincrement())
  is_draw        Boolean   @default(false)
  metadata       Json      @default("{}")
  owner_point    Int       @default(0)
  opponent_point Int       @default(0)
  opponent_id    Int
  matched_at     DateTime? @db.Timestamptz(3)
  winner_id      Int?
  winner         User?     @relation(fields: [winner_id], references: [id])
  match          Match?

  @@map("match_monitor")
}

model Transaction {
  id           Int              @id() @default(autoincrement())
  created_date DateTime         @default(now()) @db.Timestamptz(3)
  owner_id     Int
  flag         transaction_flag
  type         transaction_type
  d_coin       Int
  message      String           @db.VarChar()
  metadata     Json
  owner        User             @relation(fields: [owner_id], references: [id])

  @@map("transaction")
}

model EventStatus {
  gameweek              Int      @id
  deadline_time         DateTime @db.Timestamptz(3)
  finished              Boolean
  data_checked          Boolean
  average_entry_score   Int
  highest_scoring_entry Int
  deadline_time_epoch   Int
  is_previous           Boolean
  is_current            Boolean
  is_next               Boolean
  name                  String   @db.VarChar(26)

  @@map("event_status")
}

enum offended_rule {
  Transferring
  UsingChip
  MinWeekStart
}

enum transfer_rule {
  Limit0
  Limit1
  Limit2
  Limit3
  Limit4
  NoLimit
}

enum chip_rule {
  NoChip
  AnyChip
  All
}

enum match_status {
  Live
  Finished
  Next
}

enum transaction_type {
  CreateMatch
  Purchase
  Event
}

enum transaction_flag {
  Up
  Down
}
